package rs; 

import org.eclipse.swt.*; //подключение библиотеки swt, которая включает в себя элементы управления графическими приложениями и ее компонентов 
import org.eclipse.swt.graphics.*; 
import org.eclipse.swt.widgets.*; 
import org.eclipse.swt.layout.*; 
import org.eclipse.swt.events.*; //С помощью звездочки, все классы из org.eclipse.swt становятся находимыми 

public class main { //объявление класса main. Класс main имеет уровень доступа public, это значит, что у любого класса есть доступ к нему 

public static void main(String[] args) { 
//Создаем объект Display для связи SWT 
//с дисплеем операционной системы 
Display display = new Display(); 
//Создаем окно программы 
Shell shell = new Shell(display); 
GridLayout fillLayout = new GridLayout (); //создаем слой 
fillLayout.numColumns = 3; //ставим количество столбцов = 3 
shell.setLayout(fillLayout); // присваиваем к нашему приложению 

GridData gridData2 = new GridData(); //создаем дополнительный слой 
gridData2.horizontalAlignment = GridData.FILL; // устанавливаем тип заливки по горизонтали 
gridData2.horizontalSpan = 2; //количество столбцов =2 
//gridData2.heightHint = 50;

GridData gridData3 = new GridData();//создаем дополнительный слой 
gridData3.horizontalAlignment = GridData.FILL;// устаналиваем тип заливки по горизонтали 
gridData3.horizontalSpan = 3;//количество столбцов =3 
//gridData3.heightHint = 50; 

GridData gridDataText = new GridData(); /создаем дополнительный слой
gridDataText.horizontalSpan = 3;//количество столбцов =3 
gridDataText.verticalAlignment = GridData.FILL;// устаналиваем тип заливки по вертикали 
gridDataText.grabExcessVerticalSpace = true; //указываем зависимость размера элемента от родительского элемента
gridDataText.horizontalAlignment=GridData.FILL; // устаналиваем тип заливки по горизонтали 
gridDataText.grabExcessHorizontalSpace=true; //указываем зависимость размера элемента от родительского элемента 

Label LabelHeader=new Label(shell,SWT.NULL);  //создаем объект label 
LabelHeader.setText("Введите текст"); //вводим текст в объект 
LabelHeader.setLayoutData(gridData3);// вставляет в нужный слой 

final Text InputText=new Text(shell,SWT.MULTI | SWT.V_SCROLL );  //создаем поля для ввода текста 
InputText.setLayoutData(gridDataText);// вставляет в нужный слой 

Label LabelCharacters=new Label(shell,SWT.NULL);//создаем объект label 
LabelCharacters.setText("Символов");  //вводим текст в объект 

final Label Result=new Label(shell,SWT.NULL); //создаем объект label 
Result.setLayoutData(gridData2); // вставляет в нужный слой

Button CalculateCharacters = new Button(shell, SWT.PUSH); //создаем кнопку подсчета 
CalculateCharacters.setText("Подсчитать количество"); //вводим текст в объект 

Button ClearCharacters = new Button(shell, SWT.PUSH); // создаем кнопку очистки 
ClearCharacters.setText("Очистить текст"); //вводим текст в объект 

CalculateCharacters.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() //добавление прослушки события 
{ 
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) //в случае нажатии кнопки 
{ 
int NumberCharacters=0; //количество символов =0 
for(int n=0;n<InputText.getText().length();n++) //цикл по всей строке 
{ 
if(InputText.getText().charAt(n)=='\n') //если встречаем перевод строки - уменьшаем счетчик символов на 1 ( т. к. перевод строки считается за два символа) 
{ 
NumberCharacters--; //уменьшаем счетчик символов на 1 
} 
NumberCharacters++; //инкреминтируем счетчик символов 
} 
Result.setText(Integer.toString(NumberCharacters)); //выводим результат на экран 
} 
});

ClearCharacters.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() //добавление прослушки события
{ 
public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) //в случае нажатии кнопки 
{
InputText.setText(""); // очистка поля текста 
Result.setText(""); //очистка результата }
}); 

shell.setMinimumSize(300, 300); //устанавливаем минимальный размер окна 
shell.pack(); //вычисление приемлимого размера 
shell.open(); //выводит приложение и делает его активным 
//Обработка закрытия окна 
while (!shell.isDisposed()) { 
if (!display.readAndDispatch()) { 
display.sleep(); 
}
} 
//Ресурсы операционной системы 
//должны быть освобождены 
display.dispose(); 
}
}
